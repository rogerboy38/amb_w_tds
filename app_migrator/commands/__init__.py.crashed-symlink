import click
import frappe
from frappe.utils import get_sites
import os
import shutil
import json
import re
import subprocess
import sys
from pathlib import Path

__version__ = "2.2.0"  # Updated with comprehensive module fixes

app_name = "app_migrator"
app_title = "App Migrator"
app_publisher = "Frappe Community"
app_description = "Frappe App Migration Toolkit - ULTIMATE SYSTEM FIX"
app_email = "fcrm@amb-wellness.com"
app_license = "mit"

# ========== SESSION MANAGEMENT UTILITIES ==========

def ensure_frappe_connection():
    """Ensure Frappe connection is active - CRITICAL FOR LONG-RUNNING OPERATIONS"""
    try:
        frappe.db.sql("SELECT 1")
        return True
    except Exception:
        try:
            sites = get_sites()
            site = sites[0] if sites else None
            if site:
                frappe.init_site(site)
                frappe.connect(site=site)
                print("   üîÑ Session reconnected")
                return True
        except Exception as e:
            print(f"   ‚ùå Failed to reconnect: {e}")
            return False
    return False

def with_session_management(func):
    """Decorator to handle session management for all migration functions"""
    def wrapper(*args, **kwargs):
        try:
            if not ensure_frappe_connection():
                print("‚ùå Cannot establish Frappe connection")
                return None
            result = func(*args, **kwargs)
            frappe.db.commit()
            return result
        except Exception as e:
            print(f"‚ùå Session error in {func.__name__}: {e}")
            try:
                print("   üîÑ Attempting recovery...")
                if ensure_frappe_connection():
                    result = func(*args, **kwargs)
                    frappe.db.commit()
                    return result
            except Exception as retry_error:
                print(f"   ‚ùå Recovery failed: {retry_error}")
            return None
    return wrapper

# ========== MODULE NAME CONSISTENCY FIXES ==========

@with_session_management
def fix_modules_txt_content(target_app):
    """üìù FIX: Ensure modules.txt contains ALL modules in PROPER Title Case"""
    print(f"üìù FIXING modules.txt for: {target_app}")
    
    try:
        bench_path = Path('/home/frappe/frappe-bench')
        app_path = bench_path / 'apps' / target_app
        modules_txt_path = app_path / target_app / 'modules.txt'
        
        # Get ALL modules from database for this app
        db_modules = frappe.get_all('Module Def', 
            filters={'app_name': target_app},
            fields=['module_name']
        )
        
        # Convert ALL module names to proper Title Case
        proper_module_names = []
        for module in db_modules:
            module_name = module['module_name']
            
            # Handle different naming conventions
            if '_' in module_name:  # snake_case like "fda_compliance"
                # Convert to Title Case: "fda_compliance" ‚Üí "FDA Compliance"
                proper_name = ' '.join(word.upper() if len(word) <= 3 else word.capitalize() 
                                     for word in module_name.split('_'))
                proper_module_names.append(proper_name)
            else:  # Already Title Case or mixed
                # Ensure proper Title Case: "erpnext integrations" ‚Üí "ERPNext Integrations"
                words = module_name.split()
                proper_words = []
                for word in words:
                    if word.upper() in ['ERPNext', 'SPC', 'FDA', 'EDI', 'CRM', 'SFC', 'AMB']:
                        proper_words.append(word.upper())
                    elif len(word) <= 3:  # Acronyms
                        proper_words.append(word.upper())
                    else:
                        proper_words.append(word.capitalize())
                proper_name = ' '.join(proper_words)
                proper_module_names.append(proper_name)
        
        print(f"üìä Found {len(proper_module_names)} modules in database")
        
        # Write ALL properly formatted modules to modules.txt
        with open(modules_txt_path, 'w') as f:
            for module_name in sorted(proper_module_names):
                f.write(module_name + '\n')
        
        print(f"‚úÖ Updated modules.txt with {len(proper_module_names)} modules")
        print("üìã Modules added (first 10):")
        for module in sorted(proper_module_names)[:10]:
            print(f"   ‚Ä¢ {module}")
        if len(proper_module_names) > 10:
            print(f"   ... and {len(proper_module_names) - 10} more")
        
        return True
        
    except Exception as e:
        print(f"‚ùå modules.txt fix failed: {e}")
        return False
# ========== CASE SENSITIVITY FIX ==========

@with_session_management
def fix_module_case_sensitivity(target_app):
    """üîß CRITICAL FIX: Handle Python import case sensitivity issues"""
    print(f"üîß FIXING CASE SENSITIVITY for: {target_app}")
    
    try:
        bench_path = Path('/home/frappe/frappe-bench')
        app_path = bench_path / 'apps' / target_app / target_app
        
        # Get all modules from database
        db_modules = frappe.get_all('Module Def', 
            filters={'app_name': target_app},
            fields=['module_name']
        )
        
        fixed_count = 0
        
        for module in db_modules:
            module_name = module['module_name']
            
            # Check if we need to handle case sensitivity
            # Some Frappe internals expect lowercase module names
            if module_name != module_name.lower():
                # Create a lowercase symlink for Python imports
                lowercase_name = module_name.lower()
                module_dir = app_path / module_name
                lowercase_dir = app_path / lowercase_name
                
                if module_dir.exists() and not lowercase_dir.exists():
                    try:
                        # Create symlink: core -> Core
                        lowercase_dir.symlink_to(module_dir)
                        print(f"   üîó Created symlink: '{lowercase_name}' ‚Üí '{module_name}'")
                        fixed_count += 1
                    except Exception as e:
                        print(f"   ‚ùå Failed to create symlink for {module_name}: {e}")
        
        print(f"üéâ Created {fixed_count} case sensitivity symlinks!")
        return True
        
    except Exception as e:
        print(f"‚ùå Case sensitivity fix failed: {e}")
        return False

@with_session_management
def fix_all_module_imports_comprehensive(target_app):
    """üîÑ COMPREHENSIVE FIX: Update ALL Python imports and references"""
    print(f"üîÑ COMPREHENSIVE IMPORT FIX for: {target_app}")
    
    try:
        bench_path = Path('/home/frappe/frappe-bench')
        app_path = bench_path / 'apps' / target_app / target_app
        
        if not app_path.exists():
            print(f"‚ùå App path not found: {app_path}")
            return False
        
        # Fix 1: Update all Python files
        python_files = list(app_path.glob('**/*.py'))
        fixed_python_count = 0
        
        for py_file in python_files:
            try:
                with open(py_file, 'r') as f:
                    content = f.read()
                
                original_content = content
                
                # Fix import statements - handle both source and target app
                content = re.sub(
                    r'from\s+[\w_]+\.([\w_]+)\s+import', 
                    lambda m: f'from {target_app}.{m.group(1)} import', 
                    content
                )
                content = re.sub(
                    r'import\s+[\w_]+\.([\w_]+)', 
                    lambda m: f'import {target_app}.{m.group(1)}', 
                    content
                )
                
                if content != original_content:
                    with open(py_file, 'w') as f:
                        f.write(content)
                    fixed_python_count += 1
                    print(f"   ‚úÖ Fixed imports in: {py_file.relative_to(app_path)}")
                    
            except Exception as e:
                print(f"   ‚ùå Failed to fix {py_file}: {e}")
        
        # Fix 2: Update all JSON files (doctype definitions)
        json_files = list(app_path.glob('**/*.json'))
        fixed_json_count = 0
        
        for json_file in json_files:
            try:
                with open(json_file, 'r') as f:
                    data = json.load(f)
                
                original_data = json.dumps(data, sort_keys=True)
                
                # Fix app references in JSON
                if isinstance(data, dict):
                    if data.get('app') and data['app'] != target_app:
                        data['app'] = target_app
                        fixed_json_count += 1
                
                if json.dumps(data, sort_keys=True) != original_data:
                    with open(json_file, 'w') as f:
                        json.dump(data, f, indent=2)
                    print(f"   ‚úÖ Fixed app reference in: {json_file.relative_to(app_path)}")
                    
            except Exception as e:
                print(f"   ‚ùå Failed to fix {json_file}: {e}")
        
        print(f"üéâ Comprehensive import fix completed:")
        print(f"   ‚Ä¢ Python files fixed: {fixed_python_count}")
        print(f"   ‚Ä¢ JSON files fixed: {fixed_json_count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Comprehensive import fix failed: {e}")
        return False

def ultimate_final_fix(target_app):
    """üöÄ ULTIMATE FINAL FIX - Resolves all remaining issues"""
    print(f"üöÄ ULTIMATE FINAL FIX for: {target_app}")
    print("=" * 60)
    
    fixes = [
        ("Case Sensitivity", fix_module_case_sensitivity),
        ("Comprehensive Imports", fix_all_module_imports_comprehensive),
        ("Final modules.txt Check", fix_modules_txt_final_format),
    ]
    
    results = []
    for fix_name, fix_function in fixes:
        print(f"\nüõ†Ô∏è  RUNNING: {fix_name}")
        print("-" * 40)
        result = fix_function(target_app)
        results.append((fix_name, result))
        if result:
            print(f"‚úÖ {fix_name} - COMPLETED")
        else:
            print(f"‚ùå {fix_name} - FAILED")
    
    # Summary
    print("\n" + "=" * 60)
    print("üìä ULTIMATE FIX SUMMARY")
    print("=" * 60)
    
    successful = [name for name, result in results if result]
    failed = [name for name, result in results if not result]
    
    print(f"‚úÖ Successful: {len(successful)}/{len(fixes)}")
    for fix in successful:
        print(f"   ‚Ä¢ {fix}")
    
    if failed:
        print(f"‚ùå Failed: {len(failed)}/{len(fixes)}")
        for fix in failed:
            print(f"   ‚Ä¢ {fix}")
    else:
        print("üéâ ALL ULTIMATE FIXES COMPLETED SUCCESSFULLY!")
        print("üöÄ This should resolve the case sensitivity issues!")
    
    return len(failed) == 0

# ========== FINAL MODULES.TXT FORMATTING FIX ==========

@with_session_management
def fix_modules_txt_final_format(target_app):
    """üéØ FINAL FIX: Perfect modules.txt formatting"""
    print(f"üéØ FINAL FORMATTING modules.txt for: {target_app}")
    
    try:
        bench_path = Path('/home/frappe/frappe-bench')
        app_path = bench_path / 'apps' / target_app
        modules_txt_path = app_path / target_app / 'modules.txt'
        
        # Get current content
        with open(modules_txt_path, 'r') as f:
            current_lines = f.readlines()
        
        # Fix formatting issues
        fixed_lines = []
        for line in current_lines:
            line = line.strip()
            if not line:
                continue
                
            # Fix specific formatting issues
            if 'AND' in line:
                line = line.replace('AND', 'and')
            if line == 'APP Migrator':
                line = 'App Migrator'
            if line == 'AMB W SPC - Advanced Manufacturing and Statistical Process Control':
                line = 'AMB W SPC'
            
            fixed_lines.append(line)
        
        # Write back with perfect formatting
        with open(modules_txt_path, 'w') as f:
            for module_name in sorted(fixed_lines):
                f.write(module_name + '\n')
        
        print(f"‚úÖ Perfectly formatted modules.txt with {len(fixed_lines)} modules")
        print("üìã Final module list (first 15):")
        for module in sorted(fixed_lines)[:15]:
            print(f"   ‚Ä¢ {module}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Final formatting failed: {e}")
        return False


@with_session_management
def fix_module_name_consistency(target_app):
    """üîÑ FIX: Ensure module names are consistent between DB and filesystem"""
    print(f"üîÑ FIXING MODULE NAME CONSISTENCY for: {target_app}")
    
    try:
        bench_path = Path('/home/frappe/frappe-bench')
        app_path = bench_path / 'apps' / target_app / target_app
        
        # Get all modules from database
        db_modules = frappe.get_all('Module Def', 
            filters={'app_name': target_app},
            fields=['name', 'module_name']
        )
        
        fixed_count = 0
        
        for module in db_modules:
            current_name = module['module_name']
            
            # Check if name needs conversion from snake_case to Title Case
            if '_' in current_name:
                # Convert to proper Title Case
                proper_name = ' '.join(word.upper() if len(word) <= 3 else word.capitalize() 
                                     for word in current_name.split('_'))
                
                if proper_name != current_name:
                    try:
                        # Update database
                        frappe.db.set_value('Module Def', module['name'], 'module_name', proper_name)
                        
                        # Check if we need to rename directory
                        old_dir = app_path / current_name
                        new_dir = app_path / proper_name
                        
                        if old_dir.exists() and not new_dir.exists():
                            old_dir.rename(new_dir)
                            print(f"   üîÑ Renamed: '{current_name}' ‚Üí '{proper_name}'")
                        elif not old_dir.exists() and not new_dir.exists():
                            # Create new directory with proper name
                            new_dir.mkdir(parents=True, exist_ok=True)
                            init_file = new_dir / '__init__.py'
                            init_file.touch()
                            print(f"   üìÅ Created: '{proper_name}'")
                        
                        fixed_count += 1
                        print(f"   ‚úÖ Updated DB: '{current_name}' ‚Üí '{proper_name}'")
                        
                    except Exception as e:
                        print(f"   ‚ùå Failed to update {current_name}: {e}")
        
        frappe.db.commit()
        print(f"üéâ Fixed {fixed_count} module name inconsistencies!")
        return True
        
    except Exception as e:
        print(f"‚ùå Module name consistency fix failed: {e}")
        return False

@with_session_management
def analyze_module_naming_issues(target_app):
    """üîç ANALYZE: Identify all module naming inconsistencies"""
    print(f"üîç ANALYZING MODULE NAMING for: {target_app}")
    
    try:
        # Get all modules from database
        db_modules = frappe.get_all('Module Def', 
            filters={'app_name': target_app},
            fields=['module_name']
        )
        
        bench_path = Path('/home/frappe/frappe-bench')
        app_path = bench_path / 'apps' / target_app / target_app
        
        print("üìä MODULE NAMING ANALYSIS:")
        print("-" * 50)
        
        snake_case_modules = []
        proper_title_case = []
        inconsistent_dirs = []
        
        for module in db_modules:
            module_name = module['module_name']
            
            # Check naming convention
            if '_' in module_name:
                snake_case_modules.append(module_name)
                # Suggest proper name
                proper_name = ' '.join(word.upper() if len(word) <= 3 else word.capitalize() 
                                     for word in module_name.split('_'))
                print(f"   üêç SNAKE_CASE: '{module_name}' ‚Üí should be: '{proper_name}'")
            else:
                proper_title_case.append(module_name)
                print(f"   ‚úÖ PROPER: '{module_name}'")
            
            # Check directory existence
            module_dir = app_path / module_name
            if not module_dir.exists():
                inconsistent_dirs.append(module_name)
                print(f"   üìÅ MISSING: Directory for '{module_name}'")
        
        print(f"\nüìà ANALYSIS SUMMARY:")
        print(f"   ‚Ä¢ Total modules: {len(db_modules)}")
        print(f"   ‚Ä¢ Snake_case modules: {len(snake_case_modules)}")
        print(f"   ‚Ä¢ Proper Title Case: {len(proper_title_case)}")
        print(f"   ‚Ä¢ Missing directories: {len(inconsistent_dirs)}")
        
        if snake_case_modules:
            print(f"\nüí° RECOMMENDATIONS:")
            print(f"   ‚Ä¢ Run: bench migrate-app fix-module-names {target_app}")
            print(f"   ‚Ä¢ Run: bench migrate-app fix-modules-txt {target_app}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Module naming analysis failed: {e}")
        return False

@with_session_management
def fix_module_directory_structure(target_app):
    """üìÅ FIX: Ensure module directories match database names"""
    print(f"üìÅ FIXING MODULE DIRECTORY STRUCTURE for: {target_app}")
    
    try:
        bench_path = Path('/home/frappe/frappe-bench')
        app_path = bench_path / 'apps' / target_app / target_app
        
        # Get all modules from database
        db_modules = frappe.get_all('Module Def', 
            filters={'app_name': target_app},
            fields=['module_name']
        )
        
        fixed_count = 0
        created_count = 0
        
        for module in db_modules:
            module_name = module['module_name']
            module_dir = app_path / module_name
            
            # Check if directory exists
            if not module_dir.exists():
                # Try snake_case version (common migration issue)
                snake_name = frappe.scrub(module_name)
                snake_dir = app_path / snake_name
                
                if snake_dir.exists():
                    # Rename snake_case to Title Case
                    try:
                        snake_dir.rename(module_dir)
                        print(f"   üîÑ Renamed: '{snake_name}' ‚Üí '{module_name}'")
                        fixed_count += 1
                    except Exception as e:
                        print(f"   ‚ùå Failed to rename {snake_name}: {e}")
                else:
                    # Create new directory
                    try:
                        module_dir.mkdir(parents=True, exist_ok=True)
                        # Create __init__.py
                        init_file = module_dir / '__init__.py'
                        init_file.touch()
                        print(f"   üìÅ Created: '{module_name}'")
                        created_count += 1
                    except Exception as e:
                        print(f"   ‚ùå Failed to create {module_name}: {e}")
            
            # Ensure __init__.py exists in module directory
            else:
                init_file = module_dir / '__init__.py'
                if not init_file.exists():
                    init_file.touch()
                    print(f"   ‚úÖ Added __init__.py to: '{module_name}'")
                    fixed_count += 1
        
        print(f"üéâ Directory structure fixed: {fixed_count} fixes, {created_count} created")
        return True
        
    except Exception as e:
        print(f"‚ùå Directory structure fix failed: {e}")
        return False

@with_session_management
def fix_duplicate_module_directories(target_app):
    """üîÑ FIX: Remove duplicate directories (both Title Case and snake_case)"""
    print(f"üîÑ FIXING DUPLICATE MODULE DIRECTORIES for: {target_app}")
    
    try:
        bench_path = Path('/home/frappe/frappe-bench')
        app_path = bench_path / 'apps' / target_app / target_app
        
        # Get all modules from database (Title Case)
        db_modules = frappe.get_all('Module Def', 
            filters={'app_name': target_app},
            fields=['module_name']
        )
        
        db_module_names = [module['module_name'] for module in db_modules]
        
        # Find all directories in the app
        if app_path.exists():
            all_dirs = [d for d in app_path.iterdir() if d.is_dir()]
            
            removed_count = 0
            for directory in all_dirs:
                dir_name = directory.name
                
                # If this is a snake_case version of a Title Case module
                if dir_name != frappe.scrub(dir_name):  # It's already Title Case
                    continue
                    
                # Find if there's a Title Case version in database
                title_case_version = None
                for db_module in db_module_names:
                    if frappe.scrub(db_module) == dir_name:
                        title_case_version = db_module
                        break
                
                if title_case_version:
                    title_case_dir = app_path / title_case_version
                    # If both exist, remove snake_case version
                    if title_case_dir.exists() and directory.exists():
                        try:
                            # Copy any missing files from snake_case to Title Case
                            for file_path in directory.glob('*'):
                                if file_path.is_file():
                                    target_file = title_case_dir / file_path.name
                                    if not target_file.exists():
                                        shutil.copy2(file_path, target_file)
                                        print(f"   üìÑ Copied: {file_path.name} to {title_case_version}")
                            
                            # Remove snake_case directory
                            shutil.rmtree(directory)
                            removed_count += 1
                            print(f"   üóëÔ∏è  Removed duplicate: '{dir_name}' (kept '{title_case_version}')")
                        except Exception as e:
                            print(f"   ‚ùå Failed to remove {dir_name}: {e}")
        
        print(f"üéâ Removed {removed_count} duplicate directories")
        return True
        
    except Exception as e:
        print(f"‚ùå Duplicate directory fix failed: {e}")
        return False

def comprehensive_module_fix(target_app):
    """üîß COMPREHENSIVE MODULE FIX - Fixes all module naming issues"""
    print(f"üîß COMPREHENSIVE MODULE FIX for: {target_app}")
    print("=" * 60)
    
    fixes = [
        ("Module Name Analysis", analyze_module_naming_issues),
        ("Module Name Consistency", fix_module_name_consistency),
        ("Module Directory Structure", fix_module_directory_structure),
        ("Duplicate Directories", fix_duplicate_module_directories),
        ("modules.txt Content", fix_modules_txt_content),
    ]
    
    results = []
    for fix_name, fix_function in fixes:
        print(f"\nüõ†Ô∏è  RUNNING: {fix_name}")
        print("-" * 40)
        result = fix_function(target_app)
        results.append((fix_name, result))
        if result:
            print(f"‚úÖ {fix_name} - COMPLETED")
        else:
            print(f"‚ùå {fix_name} - FAILED")
    
    # Summary
    print("\n" + "=" * 60)
    print("üìä MODULE FIX SUMMARY")
    print("=" * 60)
    
    successful = [name for name, result in results if result]
    failed = [name for name, result in results if not result]
    
    print(f"‚úÖ Successful: {len(successful)}/{len(fixes)}")
    for fix in successful:
        print(f"   ‚Ä¢ {fix}")
    
    if failed:
        print(f"‚ùå Failed: {len(failed)}/{len(fixes)}")
        for fix in failed:
            print(f"   ‚Ä¢ {fix}")
    else:
        print("üéâ ALL MODULE FIXES COMPLETED SUCCESSFULLY!")
    
    return len(failed) == 0

# ========== ULTIMATE SYSTEM FIX FUNCTIONS ==========
@with_session_management
def fix_module_app_assignments(target_app):
    """üîß FIXES MODULE APP ASSIGNMENTS - Ensures every module has correct app_name"""
    print(f"üîÑ FIXING MODULE APP ASSIGNMENTS for: {target_app}")
    
    try:
        # Get all modules that should belong to target_app
        modules_to_fix = frappe.get_all('Module Def', 
            fields=['name', 'module_name', 'app_name'],
            filters={'app_name': ['!=', target_app]}
        )
        
        print(f"üìä Found {len(modules_to_fix)} modules with incorrect app assignments")
        
        if not modules_to_fix:
            print("‚úÖ All modules already have correct app assignments")
            return True
        
        fixed_count = 0
        for module in modules_to_fix:
            try:
                # Update module app_name
                frappe.db.set_value('Module Def', module['name'], 'app_name', target_app)
                print(f"   ‚úÖ Fixed module: {module['module_name']} ‚Üí {target_app}")
                fixed_count += 1
                
            except Exception as e:
                print(f"   ‚ùå Failed to fix module {module['module_name']}: {e}")
        
        frappe.db.commit()
        print(f"üéâ SUCCESSFULLY FIXED {fixed_count} MODULE APP ASSIGNMENTS!")
        return True
        
    except Exception as e:
        print(f"‚ùå Module app assignment fix failed: {e}")
        import traceback
        traceback.print_exc()
        return False

@with_session_management
def fix_doctype_app_assignments(target_app):
    """üîß FIXES DOCTYPE APP ASSIGNMENTS - Eliminates orphan doctypes"""
    print(f"üîÑ FIXING DOCTYPE APP ASSIGNMENTS for: {target_app}")
    
    try:
        # Find doctypes with wrong app assignment or no app
        doctypes_to_fix = frappe.get_all('DocType',
            fields=['name', 'module', 'app'],
            filters={'app': ['!=', target_app]}
        )
        
        # Also get doctypes with app=None
        app_none_doctypes = frappe.get_all('DocType',
            fields=['name', 'module'],
            filters={'app': ['is', 'not set']}
        )
        
        all_doctypes_to_fix = doctypes_to_fix + app_none_doctypes
        print(f"üìä Found {len(all_doctypes_to_fix)} doctypes with incorrect app assignments")
        
        if not all_doctypes_to_fix:
            print("‚úÖ All doctypes already have correct app assignments")
            return True
        
        fixed_count = 0
        for doctype in all_doctypes_to_fix:
            try:
                # Update doctype app
                frappe.db.set_value('DocType', doctype['name'], 'app', target_app)
                print(f"   ‚úÖ Fixed doctype: {doctype['name']} ‚Üí {target_app}")
                fixed_count += 1
                
            except Exception as e:
                print(f"   ‚ùå Failed to fix doctype {doctype['name']}: {e}")
        
        frappe.db.commit()
        print(f"üéâ SUCCESSFULLY FIXED {fixed_count} DOCTYPE APP ASSIGNMENTS!")
        return True
        
    except Exception as e:
        print(f"‚ùå Doctype app assignment fix failed: {e}")
        import traceback
        traceback.print_exc()
        return False

@with_session_management
def fix_naming_conventions(target_app):
    """üíé FIXES NAMING CONVENTIONS - Populates name_case with proper titles"""
    print(f"üîÑ FIXING NAMING CONVENTIONS for: {target_app}")
    
    try:
        # Get all doctypes in the target app
        app_doctypes = frappe.get_all('DocType',
            fields=['name', 'module', 'name_case'],
            filters={'app': target_app}
        )
        
        print(f"üìä Processing {len(app_doctypes)} doctypes for naming conventions")
        
        fixed_count = 0
        for doctype in app_doctypes:
            try:
                doctype_doc = frappe.get_doc('DocType', doctype['name'])
                
                # Generate proper name_case if missing or incorrect
                if not doctype_doc.name_case or doctype_doc.name_case == doctype_doc.name:
                    # Convert "some_doctype_name" to "Some Doctype Name"
                    proper_name = ' '.join(word.capitalize() for word in doctype_doc.name.split('_'))
                    doctype_doc.name_case = proper_name
                    doctype_doc.save()
                    
                    print(f"   ‚úÖ Fixed naming: {doctype_doc.name} ‚Üí '{proper_name}'")
                    fixed_count += 1
                
            except Exception as e:
                print(f"   ‚ùå Failed to fix naming for {doctype['name']}: {e}")
        
        frappe.db.commit()
        print(f"üéâ SUCCESSFULLY FIXED {fixed_count} NAMING CONVENTIONS!")
        return True
        
    except Exception as e:
        print(f"‚ùå Naming conventions fix failed: {e}")
        import traceback
        traceback.print_exc()
        return False

@with_session_management
def fix_tree_structures(target_app):
    """üå≥ FIXES TREE STRUCTURES - Ensures proper parent fields"""
    print(f"üîÑ FIXING TREE STRUCTURES for: {target_app}")
    
    try:
        # Find all tree doctypes in the target app
        tree_doctypes = frappe.get_all('DocType',
            fields=['name', 'is_tree', 'parent_field'],
            filters={'app': target_app, 'is_tree': 1}
        )
        
        print(f"üìä Found {len(tree_doctypes)} tree doctypes to validate")
        
        fixed_count = 0
        for doctype in tree_doctypes:
            try:
                doctype_doc = frappe.get_doc('DocType', doctype['name'])
                
                # Ensure parent field exists and is properly configured
                if doctype_doc.is_tree:
                    parent_field_exists = any(field.fieldname == 'parent_' + frappe.scrub(doctype_doc.name) 
                                            for field in doctype_doc.fields)
                    
                    if not parent_field_exists:
                        # Add missing parent field
                        parent_field = frappe.get_doc({
                            'doctype': 'DocField',
                            'parent': doctype_doc.name,
                            'parentfield': 'fields',
                            'parenttype': 'DocType',
                            'fieldname': 'parent_' + frappe.scrub(doctype_doc.name),
                            'label': 'Parent ' + (doctype_doc.name_case or doctype_doc.name),
                            'fieldtype': 'Link',
                            'options': doctype_doc.name,
                            'insert_after': 'idx'
                        })
                        parent_field.insert()
                        
                        print(f"   ‚úÖ Added parent field to: {doctype_doc.name}")
                        fixed_count += 1
                
            except Exception as e:
                print(f"   ‚ùå Failed to fix tree structure for {doctype['name']}: {e}")
        
        frappe.db.commit()
        print(f"üéâ SUCCESSFULLY FIXED {fixed_count} TREE STRUCTURES!")
        return True
        
    except Exception as e:
        print(f"‚ùå Tree structures fix failed: {e}")
        import traceback
        traceback.print_exc()
        return False

@with_session_management
def fix_custom_field_references(target_app):
    """üîó FIXES CUSTOM FIELD REFERENCES - Ensures proper app assignments"""
    print(f"üîÑ FIXING CUSTOM FIELD REFERENCES for: {target_app}")
    
    try:
        # Find custom fields pointing to wrong app
        custom_fields_to_fix = frappe.get_all('Custom Field',
            fields=['name', 'dt', 'fieldname'],
            filters={'app': ['!=', target_app]}
        )
        
        print(f"üìä Found {len(custom_fields_to_fix)} custom fields with incorrect app references")
        
        fixed_count = 0
        for custom_field in custom_fields_to_fix:
            try:
                # Update custom field app
                frappe.db.set_value('Custom Field', custom_field['name'], 'app', target_app)
                print(f"   ‚úÖ Fixed custom field: {custom_field['fieldname']} in {custom_field['dt']}")
                fixed_count += 1
                
            except Exception as e:
                print(f"   ‚ùå Failed to fix custom field {custom_field['name']}: {e}")
        
        frappe.db.commit()
        print(f"üéâ SUCCESSFULLY FIXED {fixed_count} CUSTOM FIELD REFERENCES!")
        return True
        
    except Exception as e:
        print(f"‚ùå Custom field references fix failed: {e}")
        import traceback
        traceback.print_exc()
        return False

@with_session_management
def fix_property_setter_references(target_app):
    """‚öôÔ∏è FIXES PROPERTY SETTER REFERENCES - Updates app assignments"""
    print(f"üîÑ FIXING PROPERTY SETTER REFERENCES for: {target_app}")
    
    try:
        # Find property setters with wrong app assignment
        property_setters_to_fix = frappe.get_all('Property Setter',
            fields=['name', 'doc_type', 'property'],
            filters={'app': ['!=', target_app]}
        )
        
        print(f"üìä Found {len(property_setters_to_fix)} property setters with incorrect app references")
        
        fixed_count = 0
        for prop_setter in property_setters_to_fix:
            try:
                # Update property setter app
                frappe.db.set_value('Property Setter', prop_setter['name'], 'app', target_app)
                print(f"   ‚úÖ Fixed property setter: {prop_setter['property']} in {prop_setter['doc_type']}")
                fixed_count += 1
                
            except Exception as e:
                print(f"   ‚ùå Failed to fix property setter {prop_setter['name']}: {e}")
        
        frappe.db.commit()
        print(f"üéâ SUCCESSFULLY FIXED {fixed_count} PROPERTY SETTER REFERENCES!")
        return True
        
    except Exception as e:
        print(f"‚ùå Property setter references fix failed: {e}")
        import traceback
        traceback.print_exc()
        return False

@with_session_management
def run_complete_system_fix(target_app):
    """üöÄ ULTIMATE SYSTEM FIX - Runs all fixes in sequence"""
    print("=" * 70)
    print("ü¶∏‚Äç‚ôÇÔ∏è ULTIMATE MIGRATION SYSTEM FIX")
    print("=" * 70)
    print(f"üéØ Target App: {target_app}")
    print("=" * 70)
    
    try:
        # Run all fixes in sequence
        fixes = [
            ("üîß Module App Assignments", fix_module_app_assignments),
            ("üîß Doctype App Assignments", fix_doctype_app_assignments),
            ("üíé Naming Conventions", fix_naming_conventions),
            ("üå≥ Tree Structures", fix_tree_structures),
            ("üîó Custom Field References", fix_custom_field_references),
            ("‚öôÔ∏è Property Setter References", fix_property_setter_references),
            ("üìÅ Module Directory Structure", fix_module_directory_structure),
            ("üîÑ Duplicate Directories", fix_duplicate_module_directories),
            ("üìù modules.txt Content", fix_modules_txt_content),
        ]
        
        results = []
        for fix_name, fix_function in fixes:
            print(f"\nüìã RUNNING: {fix_name}")
            print("-" * 50)
            result = fix_function(target_app)
            results.append((fix_name, result))
            if result:
                print(f"‚úÖ {fix_name} - COMPLETED SUCCESSFULLY")
            else:
                print(f"‚ùå {fix_name} - FAILED")
        
        # Summary
        print("\n" + "=" * 70)
        print("üìä SYSTEM FIX SUMMARY")
        print("=" * 70)
        successful_fixes = [name for name, result in results if result]
        failed_fixes = [name for name, result in results if not result]
        
        print(f"‚úÖ Successful: {len(successful_fixes)}/{len(fixes)}")
        for fix in successful_fixes:
            print(f"   ‚Ä¢ {fix}")
        
        if failed_fixes:
            print(f"‚ùå Failed: {len(failed_fixes)}/{len(fixes)}")
            for fix in failed_fixes:
                print(f"   ‚Ä¢ {fix}")
        else:
            print("üéâ ALL FIXES COMPLETED SUCCESSFULLY!")
            print("üöÄ Your app is now ready for clean installation!")
        
        return len(failed_fixes) == 0
        
    except Exception as e:
        print(f"‚ùå Complete system fix failed: {e}")
        import traceback
        traceback.print_exc()
        return False

# ========== INTERACTIVE MIGRATION WIZARD ==========
def interactive_app_migration():
    """INTERACTIVE APP MIGRATION WIZARD - WITH PROPER SITE SELECTION AND INPUT VALIDATION"""
    print("üöÄ INTERACTIVE APP MIGRATION WIZARD")
    
    try:
        # STEP 1: Site Selection
        sites = get_sites()
        if not sites:
            print("‚ùå No sites available")
            return
        
        print(f"\nüìã STEP 1: SELECT SITE")
        print("=" * 50)
        print("Available Sites:")
        print("  0. ‚ùå EXIT")
        for i, site in enumerate(sites, 1):
            print(f"  {i}. {site}")
        
        selected_site = None
        while selected_site is None:
            try:
                choice_input = input(f"\nüîπ Select site (0-{len(sites)}): ").strip()
                site_choice = int(choice_input)
                
                if site_choice == 0:
                    print("üö´ Operation cancelled by user")
                    return
                elif 1 <= site_choice <= len(sites):
                    selected_site = sites[site_choice - 1]
                    print(f"üìç Selected site: {selected_site}")
                else:
                    print(f"‚ùå Please enter a number between 0 and {len(sites)}")
            except ValueError:
                print("‚ùå Please enter a valid number")
        
        # STEP 2: App Selection
        with frappe.init_site(selected_site):
            frappe.connect(site=selected_site)
            
            apps = frappe.get_all('Module Def', 
                fields=['DISTINCT app_name as name'], 
                filters={'app_name': ['is', 'set']}
            )
            app_names = [app['name'] for app in apps if app['name']]
            
            if not app_names:
                print("‚ùå No apps found in this site")
                frappe.destroy()
                return
            
            print(f"\nüìã STEP 2: SELECT APPS")
            print("=" * 50)
            print("Available Apps:")
            print("  0. ‚ùå EXIT")
            for i, app in enumerate(app_names, 1):
                print(f"  {i}. {app}")
            
            # Source app selection
            source_app = None
            while source_app is None:
                try:
                    source_input = input(f"\nüîπ Select SOURCE app (0-{len(app_names)}): ").strip()
                    source_choice = int(source_input)
                    
                    if source_choice == 0:
                        print("üö´ Operation cancelled by user")
                        frappe.destroy()
                        return
                    elif 1 <= source_choice <= len(app_names):
                        source_app = app_names[source_choice - 1]
                        print(f"üì§ Selected SOURCE: {source_app}")
                    else:
                        print(f"‚ùå Please enter a number between 0 and {len(app_names)}")
                except ValueError:
                    print("‚ùå Please enter a valid number")
            
            # Target app selection  
            target_app = None
            while target_app is None:
                try:
                    target_input = input(f"\nüîπ Select TARGET app (0-{len(app_names)}): ").strip()
                    target_choice = int(target_input)
                    
                    if target_choice == 0:
                        print("üö´ Operation cancelled by user")
                        frappe.destroy()
                        return
                    elif 1 <= target_choice <= len(app_names):
                        target_app = app_names[target_choice - 1]
                        print(f"üì• Selected TARGET: {target_app}")
                    else:
                        print(f"‚ùå Please enter a number between 0 and {len(app_names)}")
                except ValueError:
                    print("‚ùå Please enter a valid number")
            
            # STEP 3: Check if apps are the same
            if source_app == target_app:
                print(f"\n‚ö†Ô∏è  WARNING: Source and target are the same ({source_app})")
                confirm = input("üîπ Continue with same app? (y/N): ").strip().lower()
                if confirm != 'y':
                    print("üö´ Operation cancelled")
                    frappe.destroy()
                    return
            
            # STEP 4: Analysis
            print(f"\nüìã STEP 3: ANALYSIS")
            print("=" * 50)
            analyze_app_dependencies(source_app)
            
            # STEP 5: Migration Type
            print(f"\nüìã STEP 4: MIGRATION TYPE")
            print("=" * 50)
            print("Migration Options:")
            print("  1. Migrate ALL modules")
            print("  2. Migrate SPECIFIC modules") 
            print("  3. Migrate SPECIFIC doctypes")
            print("  4. ü¶∏‚Äç‚ôÇÔ∏è RUN ULTIMATE SYSTEM FIX")
            print("  5. üîß RUN COMPREHENSIVE MODULE FIX")
            print("  0. ‚ùå EXIT")
            
            migration_choice = None
            while migration_choice is None:
                try:
                    choice_input = input("\nüîπ Select option (0-5): ").strip()
                    choice = int(choice_input)
                    
                    if choice == 0:
                        print("üö´ Operation cancelled by user")
                        frappe.destroy()
                        return
                    elif choice == 1:
                        confirm = input(f"‚ö†Ô∏è  Migrate ALL modules from {source_app} to {target_app}? (y/N): ").strip().lower()
                        if confirm == 'y':
                            migrate_app_modules(source_app, target_app)
                        else:
                            print("‚ùå Migration cancelled")
                        migration_choice = choice
                    elif choice == 2:
                        modules = input("üîπ Enter module names (comma-separated): ").strip()
                        if modules:
                            migrate_app_modules(source_app, target_app, modules)
                            migration_choice = choice
                        else:
                            print("‚ùå No modules specified")
                    elif choice == 3:
                        doctypes = input("üîπ Enter doctype names (comma-separated): ").strip()
                        if doctypes:
                            migrate_specific_doctypes(source_app, target_app, doctypes)
                            migration_choice = choice
                        else:
                            print("‚ùå No doctypes specified")
                    elif choice == 4:
                        confirm = input(f"‚ö†Ô∏è  Run ULTIMATE SYSTEM FIX for {target_app}? (y/N): ").strip().lower()
                        if confirm == 'y':
                            run_complete_system_fix(target_app)
                        else:
                            print("‚ùå System fix cancelled")
                        migration_choice = choice
                    elif choice == 5:
                        confirm = input(f"‚ö†Ô∏è  Run COMPREHENSIVE MODULE FIX for {target_app}? (y/N): ").strip().lower()
                        if confirm == 'y':
                            comprehensive_module_fix(target_app)
                        else:
                            print("‚ùå Module fix cancelled")
                        migration_choice = choice
                    else:
                        print("‚ùå Please enter a number between 0 and 5")
                except ValueError:
                    print("‚ùå Please enter a valid number")
            
            frappe.destroy()
            print("\nüéâ INTERACTIVE MIGRATION COMPLETED!")
            
    except KeyboardInterrupt:
        print("\n\nüö´ Operation cancelled by user (Ctrl+C)")
    except Exception as e:
        print(f"‚ùå Interactive migration failed: {e}")
        import traceback
        traceback.print_exc()
        try:
            frappe.destroy()
        except:
            pass

# ========== CORE MIGRATION FUNCTIONS ==========
@with_session_management
def migrate_app_modules(source_app, target_app, modules=None):
    """MIGRATE MODULES FROM SOURCE APP TO TARGET APP - CORE FUNCTIONALITY"""
    print(f"üöÄ MIGRATING MODULES: {source_app} ‚Üí {target_app}")
    
    try:
        source_modules = frappe.get_all('Module Def', 
            filters={'app_name': source_app},
            fields=['name', 'module_name', 'app_name']
        )
        
        if modules:
            module_list = [m.strip() for m in modules.split(',')]
            source_modules = [m for m in source_modules if m['module_name'] in module_list]
        
        print(f"üì¶ Found {len(source_modules)} modules in {source_app}")
        
        if not source_modules:
            print("‚ùå No modules found to migrate")
            return False
        
        confirm = input(f"‚ö†Ô∏è  Migrate {len(source_modules)} modules? (y/N): ").strip().lower()
        if confirm != 'y':
            print("üö´ Migration cancelled")
            return False
        
        migrated_count = 0
        for module in source_modules:
            try:
                frappe.db.set_value('Module Def', module['name'], 'app_name', target_app)
                module_doctypes = frappe.get_all('DocType',
                    filters={'module': module['module_name']},
                    fields=['name', 'module', 'app']
                )
                for doctype in module_doctypes:
                    frappe.db.set_value('DocType', doctype['name'], 'app', target_app)
                
                migrated_count += 1
                print(f"   ‚úÖ Migrated {module['module_name']} with {len(module_doctypes)} doctypes")
            except Exception as e:
                print(f"   ‚ùå Failed to migrate {module['module_name']}: {e}")
        
        frappe.db.commit()
        print(f"üéâ SUCCESSFULLY MIGRATED {migrated_count} MODULES!")
        
        # Run comprehensive module fix after migration
        print("üõ†Ô∏è  Running comprehensive module fix on target app...")
        comprehensive_module_fix(target_app)
        
        move_module_files(source_app, target_app, [m['module_name'] for m in source_modules])
        return True
            
    except Exception as e:
        print(f"‚ùå Migration failed: {e}")
        import traceback
        traceback.print_exc()
        return False

@with_session_management
def migrate_specific_doctypes(source_app, target_app, doctypes):
    """MIGRATE SPECIFIC DOCTYPES BETWEEN APPS"""
    print(f"üìÑ MIGRATING DOCTYPES: {source_app} ‚Üí {target_app}")
    
    try:
        doctype_list = [d.strip() for d in doctypes.split(',')]
        print(f"üìä Doctypes to migrate: {len(doctype_list)}")
        
        confirm = input(f"‚ö†Ô∏è  Migrate {len(doctype_list)} doctypes? (y/N): ").strip().lower()
        if confirm != 'y':
            print("üö´ Migration cancelled")
            return False
        
        migrated_count = 0
        for doctype_name in doctype_list:
            if frappe.db.exists('DocType', doctype_name):
                frappe.db.set_value('DocType', doctype_name, 'app', target_app)
                doctype_doc = frappe.get_doc('DocType', doctype_name)
                print(f"   ‚úÖ Migrated {doctype_name} (module: {doctype_doc.module})")
                migrated_count += 1
            else:
                print(f"   ‚ö†Ô∏è  Doctype not found: {doctype_name}")
        
        frappe.db.commit()
        print(f"üéâ MIGRATED {migrated_count} DOCTYPES!")
        return True
            
    except Exception as e:
        print(f"‚ùå Doctype migration failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def move_module_files(source_app, target_app, modules):
    """MOVE MODULE FILES BETWEEN APPS ON FILESYSTEM"""
    print(f"üìÅ MOVING FILES: {source_app} ‚Üí {target_app}")
    
    try:
        bench_path = Path('/home/frappe/frappe-bench')
        source_app_path = bench_path / 'apps' / source_app
        target_app_path = bench_path / 'apps' / target_app
        
        if not source_app_path.exists():
            print(f"‚ùå Source app path not found: {source_app_path}")
            return
        
        if not target_app_path.exists():
            print(f"‚ùå Target app path not found: {target_app_path}")
            return
        
        for module in modules:
            module_path = source_app_path / source_app / module
            target_module_path = target_app_path / target_app / module
            
            if module_path.exists():
                target_module_path.parent.mkdir(parents=True, exist_ok=True)
                shutil.move(str(module_path), str(target_module_path))
                print(f"   ‚úÖ Moved {module} files")
            else:
                print(f"   ‚ö†Ô∏è  Module directory not found: {module_path}")
        
        print("üéâ FILE MIGRATION COMPLETED!")
        
    except Exception as e:
        print(f"‚ùå File movement failed: {e}")

# ========== ENHANCED ANALYSIS FUNCTIONS ==========
@with_session_management
def analyze_app_dependencies(source_app):
    """COMPREHENSIVE DEPENDENCY ANALYSIS FOR MIGRATION WITH ENHANCED DIAGNOSTICS"""
    print(f"üîç COMPREHENSIVE ANALYSIS: {source_app}")
    
    try:
        modules = frappe.get_all('Module Def',
            filters={'app_name': source_app},
            fields=['name', 'module_name', 'app_name']
        )
        
        print(f"üì¶ MODULES IN {source_app}: {len(modules)}")
        for module in modules:
            print(f"   ‚Ä¢ {module['module_name']}")
            doctypes = frappe.get_all('DocType',
                filters={'module': module['module_name']},
                fields=['name', 'custom', 'is_submittable', 'issingle', 'app']
            )
            for doctype in doctypes:
                custom_flag = " (CUSTOM)" if doctype['custom'] else ""
                submittable_flag = " üìã" if doctype['is_submittable'] else ""
                single_flag = " ‚öôÔ∏è" if doctype['issingle'] else ""
                app_flag = " ‚ùå APP=NONE" if not doctype['app'] else ""
                print(f"     ‚îî‚îÄ {doctype['name']}{custom_flag}{submittable_flag}{single_flag}{app_flag}")
        
        # Enhanced Analysis Sections
        all_app_doctypes = frappe.get_all('DocType', filters={'app': source_app}, fields=['name', 'module', 'app'])
        
        # Orphan Detection
        print(f"\nüîç ENHANCED ANALYSIS: ORPHAN DETECTION")
        print("=" * 50)
        orphans = []
        for dt in all_app_doctypes:
            if not dt['module']:
                orphans.append(f"{dt['name']} - NO MODULE")
            else:
                module_check = frappe.get_all('Module Def', filters={'module_name': dt['module'], 'app_name': source_app})
                if not module_check:
                    orphans.append(f"{dt['name']} - WRONG MODULE: {dt['module']}")
        
        if orphans:
            print("‚ö†Ô∏è  ORPHAN DOCTYPES FOUND:")
            for orphan in orphans:
                print(f"   ‚Ä¢ {orphan}")
        else:
            print("‚úÖ No orphan doctypes found")
        
        # App=None Detection
        print(f"\nüîç ENHANCED ANALYSIS: APP=NONE DETECTION")
        print("=" * 50)
        app_none_doctypes = frappe.get_all('DocType', filters={'app': ['is', 'not set']}, fields=['name', 'module'])
        if app_none_doctypes:
            print(f"‚ö†Ô∏è  DOCTYPES WITH APP=NONE: {len(app_none_doctypes)}")
            for dt in app_none_doctypes[:10]:
                print(f"   ‚Ä¢ {dt['name']} (module: {dt['module']})")
            if len(app_none_doctypes) > 10:
                print(f"   ... and {len(app_none_doctypes) - 10} more")
        else:
            print("‚úÖ No doctypes with app=None")
        
        # File System Check
        print(f"\nüîç ENHANCED ANALYSIS: FILE SYSTEM CHECK")
        print("=" * 50)
        bench_path = Path('/home/frappe/frappe-bench')
        app_path = bench_path / 'apps' / source_app / source_app
        missing_files = []
        missing_db = []
        
        if app_path.exists():
            for module_dir in app_path.iterdir():
                if module_dir.is_dir():
                    for doctype_file in module_dir.glob('**/*.json'):
                        doctype_name = doctype_file.stem
                        if not frappe.db.exists('DocType', doctype_name):
                            missing_db.append(f"{doctype_name} (file exists, not in DB)")
            
            for dt in all_app_doctypes:
                expected_path = app_path / dt['module'] / f"{dt['name']}.json"
                snake_name = frappe.scrub(dt['name'])
                snake_path = app_path / dt['module'] / f"{snake_name}.json"
                if not expected_path.exists() and not snake_path.exists():
                    missing_files.append(f"{dt['name']} (in DB, no file)")
        
        if missing_files:
            print("‚ö†Ô∏è  DOCTYPES IN DB BUT MISSING FILES:")
            for item in missing_files[:5]:
                print(f"   ‚Ä¢ {item}")
            if len(missing_files) > 5:
                print(f"   ... and {len(missing_files) - 5} more")
        else:
            print("‚úÖ All DB doctypes have corresponding files")
            
        if missing_db:
            print("‚ö†Ô∏è  DOCTYPE FILES WITH NO DB RECORDS:")
            for item in missing_db[:5]:
                print(f"   ‚Ä¢ {item}")
            if len(missing_db) > 5:
                print(f"   ... and {len(missing_db) - 5} more")
        else:
            print("‚úÖ All doctype files have DB records")
        
        # Dependency Analysis
        print(f"\nüîç ENHANCED ANALYSIS: DEPENDENCIES")
        print("=" * 50)
        all_doctypes = frappe.get_all('DocType', fields=['name', 'app'])
        dependency_count = 0
        cross_app_dependencies = []
        source_doctypes = [dt['name'] for dt in all_app_doctypes]
        
        for target_dt in all_doctypes:
            if target_dt['app'] != source_app:
                try:
                    doc = frappe.get_doc('DocType', target_dt['name'])
                    doc_json = doc.as_json()
                    references = [source_dt for source_dt in source_doctypes if source_dt in doc_json]
                    if references:
                        cross_app_dependencies.append({'doctype': target_dt['name'], 'app': target_dt['app'], 'references': references})
                        dependency_count += 1
                except Exception:
                    pass
        
        if cross_app_dependencies:
            print(f"‚ö†Ô∏è  CROSS-APP DEPENDENCIES: {len(cross_app_dependencies)}")
            for dep in cross_app_dependencies[:5]:
                print(f"   ‚Ä¢ {dep['doctype']} ({dep['app']}) references: {', '.join(dep['references'])}")
            if len(cross_app_dependencies) > 5:
                print(f"   ... and {len(cross_app_dependencies) - 5} more")
        else:
            print("‚úÖ No cross-app dependencies found")
        
        # Comprehensive Summary
        print(f"\nüìä COMPREHENSIVE SUMMARY:")
        print(f"   ‚Ä¢ Modules: {len(modules)}")
        print(f"   ‚Ä¢ Doctypes: {len(all_app_doctypes)}")
        print(f"   ‚Ä¢ Orphan Doctypes: {len(orphans)}")
        print(f"   ‚Ä¢ App=None Doctypes: {len(app_none_doctypes)}")
        print(f"   ‚Ä¢ Missing Files: {len(missing_files)}")
        print(f"   ‚Ä¢ Missing DB Records: {len(missing_db)}")
        print(f"   ‚Ä¢ Cross-App Dependencies: {dependency_count}")
        
        # Recommendations
        print(f"\nüí° RECOMMENDATIONS:")
        recommendations = []
        if orphans:
            recommendations.append("Run: bench migrate-app fix-orphans " + source_app)
        if app_none_doctypes:
            recommendations.append("Run: bench migrate-app fix-app-none " + source_app)
        if missing_files:
            recommendations.append("Run: bench migrate-app restore-missing " + source_app)
        if cross_app_dependencies:
            recommendations.append("Run: bench migrate-app fix-all-references " + source_app)
        
        if recommendations:
            for rec in recommendations:
                print(f"   ‚Ä¢ {rec}")
        else:
            print("   ‚Ä¢ App is ready for migration!")
        
    except Exception as e:
        print(f"‚ùå Analysis failed: {e}")
        import traceback
        traceback.print_exc()

@with_session_management
def validate_app_modules(target_app):
    """VALIDATE ACTUAL MODULES VS REPORTED MODULES"""
    print(f"üîç VALIDATING MODULES FOR: {target_app}")
    
    try:
        # Get reported modules
        reported_modules = frappe.get_all('Module Def', 
            filters={'app_name': target_app},
            fields=['name', 'module_name', 'app_name']
        )
        
        print(f"üìä REPORTED modules in {target_app}: {len(reported_modules)}")
        
        # Verify each module actually exists and has doctypes
        actual_modules = []
        for module in reported_modules:
            # Check if module has any actual doctypes
            module_doctypes = frappe.get_all('DocType',
                filters={'module': module['module_name']},
                fields=['name']
            )
            
            if module_doctypes:
                actual_modules.append(module)
                print(f"   ‚úÖ REAL: {module['module_name']} - {len(module_doctypes)} doctypes")
            else:
                print(f"   ‚ùå GHOST: {module['module_name']} - No doctypes found")
        
        print(f"üìä ACTUAL modules with content: {len(actual_modules)}")
        return actual_modules
        
    except Exception as e:
        print(f"‚ùå Validation failed: {e}")
        return []

@with_session_management
def analyze_app(source_app):
    """Comprehensive app analysis with enhanced diagnostics AND FEEDBACK"""
    print(f"üîç COMPREHENSIVE APP ANALYSIS: {source_app}")
    
    try:
        app_doctypes = frappe.get_all('DocType', filters={'app': source_app}, 
            fields=['name', 'module', 'custom', 'is_submittable', 'issingle'])
        app_modules = frappe.get_all('Module Def', filters={'app_name': source_app}, 
            fields=['name', 'module_name'])
        
        print(f"üìä APP OVERVIEW:")
        print(f"   ‚Ä¢ Doctypes: {len(app_doctypes)}")
        print(f"   ‚Ä¢ Modules: {len(app_modules)}")
        print(f"   ‚Ä¢ Custom Doctypes: {len([d for d in app_doctypes if d['custom']])}")
        print(f"   ‚Ä¢ Submittable Doctypes: {len([d for d in app_doctypes if d['is_submittable']])}")
        print(f"   ‚Ä¢ Single Doctypes: {len([d for d in app_doctypes if d['issingle']])}")
        
        print(f"\nüì¶ MODULE BREAKDOWN:")
        for module in app_modules:
            module_doctypes = [d for d in app_doctypes if d['module'] == module['module_name']]
            print(f"   ‚Ä¢ {module['module_name']}: {len(module_doctypes)} doctypes")
            
        print("üéâ ANALYSIS COMPLETED!")
        return True
            
    except Exception as e:
        print(f"‚ùå Analysis failed: {e}")
        import traceback
        traceback.print_exc()
        return False

@with_session_management
def analyze_orphan_doctypes():
    """Comprehensive orphan analysis WITH FEEDBACK"""
    print("üîç COMPREHENSIVE ORPHAN ANALYSIS")
    
    try:
        all_doctypes = frappe.get_all('DocType', fields=['name', 'module', 'app'])
        orphans = []
        app_none_count = 0
        
        for dt in all_doctypes:
            if not dt['app']:
                app_none_count += 1
                orphans.append({'doctype': dt['name'], 'issue': 'APP_NONE', 'module': dt['module']})
            elif not dt['module']:
                orphans.append({'doctype': dt['name'], 'issue': 'NO_MODULE', 'module': None, 'app': dt['app']})
            else:
                module_check = frappe.get_all('Module Def', filters={'module_name': dt['module'], 'app_name': dt['app']})
                if not module_check:
                    orphans.append({'doctype': dt['name'], 'issue': 'WRONG_MODULE', 'module': dt['module'], 'app': dt['app']})
        
        print(f"üìä ORPHAN ANALYSIS RESULTS:")
        print(f"   ‚Ä¢ Total Doctypes: {len(all_doctypes)}")
        print(f"   ‚Ä¢ Orphan Doctypes: {len(orphans)}")
        print(f"   ‚Ä¢ APP=NONE: {app_none_count}")
        
        if orphans:
            print(f"\nüîç Orphan Doctypes Breakdown:")
            for issue_type in ['APP_NONE', 'NO_MODULE', 'WRONG_MODULE']:
                issue_orphans = [o for o in orphans if o['issue'] == issue_type]
                if issue_orphans:
                    print(f"   ‚Ä¢ {issue_type}: {len(issue_orphans)}")
                    for orphan in issue_orphans[:5]:
                        print(f"     ‚îî‚îÄ {orphan['doctype']} (app: {orphan.get('app', 'N/A')})")
                    if len(issue_orphans) > 5:
                        print(f"     ... and {len(issue_orphans) - 5} more")
        
        print("üéâ ORPHAN ANALYSIS COMPLETED!")
        return True
            
    except Exception as e:
        print(f"‚ùå Orphan analysis failed: {e}")
        import traceback
        traceback.print_exc()
        return False

# ========== ENHANCED FIX FUNCTIONS ==========
@with_session_management
def fix_orphan_doctypes(source_app):
    """Fix orphan doctypes with enhanced module-based assignment AND FEEDBACK"""
    print(f"üîß FIXING ORPHAN DOCTYPES for {source_app}")
    
    try:
        all_app_doctypes = frappe.get_all('DocType', filters={'app': source_app}, fields=['name', 'module', 'app'])
        orphans = []
        for dt in all_app_doctypes:
            if not dt['module']:
                orphans.append({'doctype': dt['name'], 'issue': 'NO_MODULE', 'current_module': None})
            else:
                module_check = frappe.get_all('Module Def', filters={'module_name': dt['module'], 'app_name': source_app})
                if not module_check:
                    orphans.append({'doctype': dt['name'], 'issue': 'WRONG_MODULE', 'current_module': dt['module']})
        
        print(f"üìä Found {len(orphans)} orphan doctypes")
        
        if not orphans:
            print("‚úÖ No orphan doctypes found")
            return True
        
        print("\nüîç Orphan Doctypes:")
        for orphan in orphans:
            print(f"   ‚Ä¢ {orphan['doctype']} - {orphan['issue']} (module: {orphan['current_module']})")
        
        confirm = input(f"\n‚ö†Ô∏è  Fix {len(orphans)} orphan doctypes? (y/N): ").strip().lower()
        if confirm != 'y':
            print("üö´ Operation cancelled")
            return False
        
        app_modules = frappe.get_all('Module Def', filters={'app_name': source_app}, fields=['module_name'])
        module_names = [m['module_name'] for m in app_modules]
        
        fixed_count = 0
        for orphan in orphans:
            try:
                if orphan['issue'] == 'NO_MODULE' and module_names:
                    frappe.db.set_value('DocType', orphan['doctype'], 'module', module_names[0])
                    print(f"   ‚úÖ Assigned {orphan['doctype']} to module: {module_names[0]}")
                    fixed_count += 1
                elif orphan['issue'] == 'WRONG_MODULE' and module_names:
                    frappe.db.set_value('DocType', orphan['doctype'], 'module', module_names[0])
                    print(f"   ‚úÖ Reassigned {orphan['doctype']} from {orphan['current_module']} to {module_names[0]}")
                    fixed_count += 1
            except Exception as e:
                print(f"   ‚ùå Failed to fix {orphan['doctype']}: {e}")
        
        frappe.db.commit()
        print(f"üéâ SUCCESSFULLY FIXED {fixed_count} ORPHAN DOCTYPES!")
        return True
            
    except Exception as e:
        print(f"‚ùå Fix orphan doctypes failed: {e}")
        import traceback
        traceback.print_exc()
        return False

@with_session_management
def restore_missing_doctypes(source_app):
    """Enhanced restoration with canonical module prioritization AND FEEDBACK"""
    print(f"üîß RESTORING MISSING DOCTYPES for {source_app}")
    
    try:
        app_doctypes = frappe.get_all('DocType', filters={'app': source_app}, fields=['name', 'module', 'custom'])
        bench_path = Path('/home/frappe/frappe-bench')
        app_path = bench_path / 'apps' / source_app / source_app
        
        missing_files = []
        
        print(f"üìä Checking {len(app_doctypes)} doctypes in {source_app}")
        
        for doctype in app_doctypes:
            doctype_name = doctype['name']
            module_name = doctype['module']
            expected_path = app_path / module_name / f"{doctype_name}.json"
            snake_name = frappe.scrub(doctype_name)
            snake_path = app_path / module_name / f"{snake_name}.json"
            
            if not expected_path.exists() and not snake_path.exists():
                missing_files.append({'doctype': doctype_name, 'module': module_name, 'custom': doctype.get('custom', 0)})
        
        print(f"üìä Found {len(missing_files)} missing doctype files")
        
        if not missing_files:
            print("‚úÖ All doctype files are present")
            return True
        
        print("\nüîç Missing Doctype Files:")
        for missing in missing_files[:10]:
            custom_flag = " (CUSTOM)" if missing['custom'] else ""
            print(f"   ‚Ä¢ {missing['doctype']} in {missing['module']}{custom_flag}")
        if len(missing_files) > 10:
            print(f"   ... and {len(missing_files) - 10} more")
        
        confirm = input(f"\n‚ö†Ô∏è  Create {len(missing_files)} missing doctype files? (y/N): ").strip().lower()
        if confirm != 'y':
            print("üö´ Operation cancelled")
            return False
        
        created_count = 0
        error_count = 0
        
        for missing in missing_files:
            try:
                basic_structure = {
                    'doctype': 'DocType', 'name': missing['doctype'], 'module': missing['module'],
                    'custom': missing['custom'], 'fields': [], 'permissions': []
                }
                module_dir = app_path / missing['module']
                module_dir.mkdir(parents=True, exist_ok=True)
                file_path = module_dir / f"{missing['doctype']}.json"
                with open(file_path, 'w') as f:
                    json.dump(basic_structure, f, indent=2)
                created_count += 1
                print(f"   ‚úÖ Created: {missing['doctype']}.json")
            except Exception as e:
                error_count += 1
                print(f"   ‚ùå Failed to create {missing['doctype']}: {e}")
        
        print(f"\nüìä RESTORATION SUMMARY:")
        print(f"   ‚Ä¢ Files created: {created_count}")
        print(f"   ‚Ä¢ Errors: {error_count}")
        
        if created_count > 0:
            print("üéâ Missing doctype files restored successfully!")
        return True
            
    except Exception as e:
        print(f"‚ùå Restore missing doctypes failed: {e}")
        import traceback
        traceback.print_exc()
        return False

@with_session_management
def fix_app_none_doctypes(target_app):
    """Fix all doctypes with app=None by assigning them to correct app WITH FEEDBACK"""
    print(f"üîß FIXING APP=NONE FOR: {target_app}")
    
    try:
        app_none_doctypes = frappe.get_all('DocType', filters={'app': ['is', 'not set']}, fields=['name', 'module'])
        print(f"üìä Found {len(app_none_doctypes)} doctypes with app=None")
        
        if not app_none_doctypes:
            print("‚úÖ No doctypes with app=None found")
            return True
        
        print("\nüîç Doctypes to be fixed:")
        for dt in app_none_doctypes:
            print(f"   ‚Ä¢ {dt['name']} (module: {dt['module']})")
        
        confirm = input(f"\n‚ö†Ô∏è  Fix {len(app_none_doctypes)} doctypes with app=None? (y/N): ").strip().lower()
        if confirm != 'y':
            print("üö´ Operation cancelled")
            return False
        
        fixed_count = 0
        error_count = 0
        
        for dt in app_none_doctypes:
            try:
                frappe.db.set_value('DocType', dt['name'], 'app', target_app)
                fixed_count += 1
                print(f"   ‚úÖ Fixed {dt['name']}")
            except Exception as e:
                error_count += 1
                print(f"   ‚ùå Failed to fix {dt['name']}: {e}")
        
        frappe.db.commit()
        print(f"\nüìä FIX SUMMARY:")
        print(f"   ‚Ä¢ Successfully fixed: {fixed_count}")
        print(f"   ‚Ä¢ Errors: {error_count}")
        
        if fixed_count > 0:
            print("üéâ APP=NONE issue resolved successfully!")
        return True
            
    except Exception as e:
        print(f"‚ùå Fix app=None failed: {e}")
        import traceback
        traceback.print_exc()
        return False

@with_session_management
def fix_all_references(target_app):
    """Fix all Link and Table field references WITH FEEDBACK"""
    print(f"üîó FIXING REFERENCES FOR: {target_app}")
    
    try:
        target_doctypes = frappe.get_all('DocType', filters={'app': target_app}, fields=['name'])
        target_doctype_names = [dt['name'] for dt in target_doctypes]
        all_doctypes = frappe.get_all('DocType', fields=['name'])
        
        print(f"üìä Found {len(target_doctype_names)} doctypes in {target_app}")
        
        fixed_count = 0
        checked_count = 0
        
        for source_dt in all_doctypes:
            try:
                doc = frappe.get_doc('DocType', source_dt['name'])
                doc_modified = False
                
                for field in doc.fields:
                    if field.fieldtype in ['Link', 'Table'] and field.options in target_doctype_names:
                        print(f"   üîó {source_dt['name']}.{field.fieldname} ‚Üí {field.options}")
                        doc_modified = True
                
                if doc_modified:
                    fixed_count += 1
                
                checked_count += 1
                if checked_count % 10 == 0:
                    print(f"   üìã Checked {checked_count}/{len(all_doctypes)} doctypes...")
                    
            except Exception as e:
                print(f"   ‚ùå Error checking {source_dt['name']}: {e}")
        
        print(f"\nüìä REFERENCE FIX SUMMARY:")
        print(f"   ‚Ä¢ Doctypes checked: {checked_count}")
        print(f"   ‚Ä¢ Doctypes with references: {fixed_count}")
        print(f"   ‚Ä¢ Target doctypes: {len(target_doctype_names)}")
        
        print("üéâ REFERENCE ANALYSIS COMPLETED!")
        return True
            
    except Exception as e:
        print(f"‚ùå Fix references failed: {e}")
        import traceback
        traceback.print_exc()
        return False

# ========== VALIDATION AND SYSTEMATIC FUNCTIONS ==========
@with_session_management
def systematic_renaming(source_app, target_app=None):
    """Systematic renaming based on research findings WITH FEEDBACK"""
    print(f"üîÑ SYSTEMATIC RENAMING for {source_app}")
    
    try:
        if not target_app:
            target_app = source_app
        
        print(f"üìä Preparing systematic renaming: {source_app} ‚Üí {target_app}")
        
        source_modules = frappe.get_all('Module Def', filters={'app_name': source_app}, fields=['name', 'module_name'])
        print(f"üìã Modules to process: {len(source_modules)}")
        
        for module in source_modules:
            print(f"   üîÑ Processing module: {module['module_name']}")
            module_doctypes = frappe.get_all('DocType', filters={'module': module['module_name']}, fields=['name', 'custom'])
            print(f"     üìÑ Doctypes in module: {len(module_doctypes)}")
            for doctype in module_doctypes:
                custom_flag = " (CUSTOM)" if doctype['custom'] else ""
                print(f"     ‚îî‚îÄ {doctype['name']}{custom_flag}")
        
        print(f"üéâ SYSTEMATIC RENAMING ANALYSIS COMPLETED!")
        print("üí° This is a preview - actual renaming would require additional confirmation")
        return True
            
    except Exception as e:
        print(f"‚ùå Systematic renaming failed: {e}")
        import traceback
        traceback.print_exc()
        return False

@with_session_management
def validate_migration_readiness(source_app):
    """Validate if app is ready for migration WITH FEEDBACK"""
    print(f"‚úÖ VALIDATING MIGRATION READINESS for {source_app}")
    
    try:
        issues = []
        warnings = []
        
        # Check 1: APP=NONE doctypes
        app_none_doctypes = frappe.get_all('DocType', filters={'app': ['is', 'not set']})
        if app_none_doctypes:
            issues.append(f"APP=NONE doctypes: {len(app_none_doctypes)}")
        
        # Check 2: Orphan doctypes
        all_app_doctypes = frappe.get_all('DocType', filters={'app': source_app}, fields=['name', 'module'])
        orphans = 0
        for dt in all_app_doctypes:
            if not dt['module']:
                orphans += 1
            else:
                module_check = frappe.get_all('Module Def', filters={'module_name': dt['module'], 'app_name': source_app})
                if not module_check:
                    orphans += 1
        
        if orphans > 0:
            issues.append(f"Orphan doctypes: {orphans}")
        
        # Check 3: File system sync
        bench_path = Path('/home/frappe/frappe-bench')
        app_path = bench_path / 'apps' / source_app / source_app
        missing_files = 0
        if app_path.exists():
            for dt in all_app_doctypes:
                expected_path = app_path / dt['module'] / f"{dt['name']}.json"
                snake_path = app_path / dt['module'] / f"{frappe.scrub(dt['name'])}.json"
                if not expected_path.exists() and not snake_path.exists():
                    missing_files += 1
        
        if missing_files > 0:
            warnings.append(f"Missing doctype files: {missing_files}")
        
        # Results
        print(f"üìä VALIDATION RESULTS:")
        print(f"   ‚Ä¢ Doctypes in app: {len(all_app_doctypes)}")
        
        if not issues and not warnings:
            print("   ‚úÖ READY FOR MIGRATION - No issues found!")
            return True
        else:
            if issues:
                print("   ‚ùå CRITICAL ISSUES (must fix before migration):")
                for issue in issues:
                    print(f"     ‚Ä¢ {issue}")
            if warnings:
                print("   ‚ö†Ô∏è  WARNINGS (recommended to fix):")
                for warning in warnings:
                    print(f"     ‚Ä¢ {warning}")
            
            print(f"\nüí° RECOMMENDATIONS:")
            if "APP=NONE" in str(issues):
                print("   ‚Ä¢ Run: bench migrate-app fix-app-none " + source_app)
            if "Orphan doctypes" in str(issues):
                print("   ‚Ä¢ Run: bench migrate-app fix-orphans " + source_app)
            if "Missing doctype files" in str(warnings):
                print("   ‚Ä¢ Run: bench migrate-app restore-missing " + source_app)
            
            return False
            
    except Exception as e:
        print(f"‚ùå Validation failed: {e}")
        import traceback
        traceback.print_exc()
        return False

# ========== INTELLIGENT CUSTOMIZATION MIGRATION ==========
@with_session_management
def migrate_customizations(source_app, target_app):
    """SMART CUSTOMIZATION MIGRATION - Handles fixtures, custom fields, workflows"""
    print(f"üîß MIGRATING CUSTOMIZATIONS: {source_app} ‚Üí {target_app}")
    
    try:
        bench_path = Path('/home/frappe/frappe-bench')
        source_fixtures = bench_path / 'apps' / source_app / source_app / 'fixtures'
        target_fixtures = bench_path / 'apps' / target_app / target_app / 'fixtures'
        
        if not source_fixtures.exists():
            print(f"‚ùå No fixtures found in {source_app}")
            return False
        
        # Create target fixtures directory
        target_fixtures.mkdir(parents=True, exist_ok=True)
        
        # Copy and intelligently fix fixture files
        fixture_files = list(source_fixtures.glob('*.json'))
        print(f"üì¶ Found {len(fixture_files)} fixture files")
        
        migrated_count = 0
        for fixture_file in fixture_files:
            try:
                with open(fixture_file, 'r') as f:
                    data = json.load(f)
                
                # AUTO-FIX: Add missing 'name' fields
                fixes_applied = auto_fix_fixture_data(data)
                
                # Write fixed data to target
                target_file = target_fixtures / fixture_file.name
                with open(target_file, 'w') as f:
                    json.dump(data, f, indent=2)
                
                migrated_count += 1
                print(f"   ‚úÖ Migrated: {fixture_file.name} ({len(fixes_applied)} fixes)")
                if fixes_applied:
                    for fix in fixes_applied[:3]:  # Show first 3 fixes
                        print(f"      üîß {fix}")
                    if len(fixes_applied) > 3:
                        print(f"      ... and {len(fixes_applied) - 3} more fixes")
                        
            except Exception as e:
                print(f"   ‚ùå Failed to migrate {fixture_file.name}: {e}")
        
        print(f"üéâ SUCCESSFULLY MIGRATED {migrated_count} FIXTURE FILES!")
        
        # Sync the fixtures
        print("üîÑ Syncing fixtures to database...")
        frappe.db.commit()
        print("‚úÖ Customizations applied successfully!")
        return True
            
    except Exception as e:
        print(f"‚ùå Customization migration failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def auto_fix_fixture_data(data):
    """AUTO-FIX common fixture issues - INTELLIGENT NAME GENERATION"""
    fixes_applied = []
    
    if isinstance(data, list):
        for i, item in enumerate(data):
            # FIX 1: Missing 'name' field
            if 'doctype' in item and 'name' not in item:
                generated_name = generate_intelligent_name(item)
                item['name'] = generated_name
                fixes_applied.append(f"Added name: {generated_name}")
            
            # FIX 2: Ensure module assignment for customizations
            if 'doctype' in item and 'module' not in item:
                item['module'] = 'Core'  # Default module for customizations
                fixes_applied.append(f"Added module: Core")
            
            # FIX 3: Clean up fieldnames
            if item.get('doctype') == 'Custom Field' and 'fieldname' in item:
                if not item['fieldname'].startswith('custom_'):
                    item['fieldname'] = f"custom_{item['fieldname']}"
                    fixes_applied.append(f"Fixed fieldname: {item['fieldname']}")
    
    return fixes_applied

def generate_intelligent_name(item):
    """INTELLIGENT NAME GENERATION for different doctypes"""
    doctype = item.get('doctype', '')
    
    if doctype == 'Custom Field':
        fieldname = item.get('fieldname', 'unknown')
        dt = item.get('dt', 'unknown')
        return f"{fieldname}-{dt}"
    
    elif doctype == 'Workflow':
        return item.get('workflow_name', 'unknown_workflow')
    
    elif doctype == 'Workflow State':
        return item.get('state', 'unknown_state')
    
    elif doctype == 'Workflow Action':
        return item.get('action', 'unknown_action')
    
    elif doctype == 'Print Format':
        return item.get('format_name', 'unknown_format')
    
    elif doctype == 'Server Script':
        return item.get('script_name', 'unknown_script')
    
    else:
        # Generic name generation
        key_field = next((k for k in ['name', 'title', 'label', 'fieldname'] if k in item), 'unknown')
        return f"{item.get(key_field, 'unknown')}-{doctype.lower()}"

@with_session_management
def detect_customization_pattern(app_name):
    """DETECT WHAT TYPE OF CUSTOMIZATION PATTERN THE APP USES"""
    print(f"üîç DETECTING CUSTOMIZATION PATTERN: {app_name}")
    
    try:
        bench_path = Path('/home/frappe/frappe-bench')
        app_path = bench_path / 'apps' / app_name / app_name
        
        # Pattern analysis
        patterns = {
            'custom_fields_only': 0,
            'workflows_only': 0,
            'ui_customizations': 0,
            'business_logic': 0,
            'mixed_customizations': 0
        }
        
        # Analyze fixtures
        fixtures_path = app_path / 'fixtures'
        if fixtures_path.exists():
            for fixture_file in fixtures_path.glob('*.json'):
                with open(fixture_file, 'r') as f:
                    data = json.load(f)
                
                if isinstance(data, list):
                    for item in data:
                        doctype = item.get('doctype', '')
                        if doctype == 'Custom Field':
                            patterns['custom_fields_only'] += 1
                        elif doctype == 'Workflow':
                            patterns['workflows_only'] += 1
                        elif doctype in ['Print Format', 'Client Script']:
                            patterns['ui_customizations'] += 1
                        elif doctype == 'Server Script':
                            patterns['business_logic'] += 1
        
        # Determine primary pattern
        total_customizations = sum(patterns.values())
        if total_customizations == 0:
            print("   üìä Pattern: NO CUSTOMIZATIONS (vanilla app)")
            return 'vanilla'
        
        primary_pattern = max(patterns, key=patterns.get)
        
        print(f"   üìä CUSTOMIZATION ANALYSIS:")
        print(f"      ‚Ä¢ Custom Fields: {patterns['custom_fields_only']}")
        print(f"      ‚Ä¢ Workflows: {patterns['workflows_only']}")
        print(f"      ‚Ä¢ UI Enhancements: {patterns['ui_customizations']}")
        print(f"      ‚Ä¢ Business Logic: {patterns['business_logic']}")
        print(f"   üéØ PRIMARY PATTERN: {primary_pattern.upper()}")
        
        return primary_pattern
            
    except Exception as e:
        print(f"‚ùå Pattern detection failed: {e}")
        return 'unknown'

@with_session_management  
def intelligent_app_migration(source_app, target_app):
    """INTELLIGENT MIGRATION - Auto-detects pattern and applies optimal strategy"""
    print(f"üß† INTELLIGENT MIGRATION: {source_app} ‚Üí {target_app}")
    
    # Step 1: Detect pattern
    pattern = detect_customization_pattern(source_app)
    
    # Step 2: Apply optimal strategy
    if pattern == 'vanilla':
        print("   üöÄ Strategy: FULL MODULE MIGRATION")
        return migrate_app_modules(source_app, target_app)
    
    elif pattern in ['custom_fields_only', 'workflows_only', 'ui_customizations', 'business_logic']:
        print(f"   üöÄ Strategy: CUSTOMIZATION MIGRATION ({pattern})")
        return migrate_customizations(source_app, target_app)
    
    elif pattern == 'mixed_customizations':
        print("   üöÄ Strategy: HYBRID MIGRATION")
        # First migrate customizations, then modules
        customization_success = migrate_customizations(source_app, target_app)
        module_success = migrate_app_modules(source_app, target_app)
        return customization_success and module_success
    
    else:
        print("   üöÄ Strategy: COMPREHENSIVE MIGRATION")
        return migrate_app_modules(source_app, target_app)

# ========== LEGACY FUNCTIONS (for compatibility) ==========
def interactive_migration():
    """Interactive migration wizard"""
    print("Interactive migration - Enhanced version coming soon")

def select_modules_interactive(source_app, target_app):
    """Select modules interactively"""
    print("Enhanced module selection - Coming soon")
    return [], []

# ========== Before MAIN COMMAND HANDLER ==========
# ========== HERO RESCUE PROTOCOL ==========

def hero_rescue_protocol(target_app):
    """ü¶∏‚Äç‚ôÇÔ∏è HERO RESCUE: Fix symlink loops and rebuild structure"""
    print(f"ü¶∏‚Äç‚ôÇÔ∏è HERO RESCUE PROTOCOL for: {target_app}")
    
    try:
        import os
        bench_path = Path('/home/frappe/frappe-bench')
        app_path = bench_path / 'apps' / target_app / target_app
        
        rescued_count = 0
        
        # Fix all modules
        for module_dir in app_path.iterdir():
            if module_dir.is_dir():
                module_name = module_dir.name
                
                # Check for symlink loops in doctype
                doctype_path = module_dir / 'doctype'
                if doctype_path.exists() and doctype_path.is_symlink():
                    # Remove broken symlink
                    doctype_path.unlink()
                    print(f"   üîì Removed symlink loop: {module_name}/doctype")
                    rescued_count += 1
                
                # Rebuild proper doctype structure
                if not doctype_path.exists():
                    doctype_path.mkdir(parents=True, exist_ok=True)
                    (doctype_path / '__init__.py').touch()
                    print(f"   üìÅ Rebuilt doctype: {module_name}")
                    rescued_count += 1
                
                # Ensure critical doctypes exist
                critical_doctypes = ['system_settings', 'doc_type', 'module_def', 'user']
                for doctype_name in critical_doctypes:
                    doctype_subdir = doctype_path / doctype_name
                    if not doctype_subdir.exists():
                        doctype_subdir.mkdir(parents=True, exist_ok=True)
                        (doctype_subdir / '__init__.py').touch()
                        print(f"   üõ†Ô∏è  Created: {module_name}/doctype/{doctype_name}")
                        rescued_count += 1
        
        print(f"üéâ Hero rescue completed: {rescued_count} operations")
        return True
        
    except Exception as e:
        print(f"‚ùå Hero rescue failed: {e}")
        return False

def emergency_core_fix():
    """üö® EMERGENCY: Direct Core module structure fix"""
    print("üö® EMERGENCY CORE STRUCTURE FIX")
    
    try:
        import os
        core_path = Path('/home/frappe/frappe-bench/apps/erpnext_cloned/erpnext_cloned/Core')
        
        # Remove any broken symlinks
        for item in core_path.iterdir():
            if item.is_symlink() and item.name == item.resolve().name:
                item.unlink()
                print(f"   üîì Removed self-referencing symlink: {item.name}")
        
        # Rebuild Core structure
        doctype_path = core_path / 'doctype'
        if doctype_path.exists():
            shutil.rmtree(doctype_path)
        
        # Create proper structure
        doctype_path.mkdir(parents=True)
        (doctype_path / '__init__.py').touch()
        
        # Create critical Core doctypes
        critical_doctypes = [
            'system_settings', 'doc_type', 'module_def', 'user', 'file', 
            'communication', 'session_default', 'success_action'
        ]
        
        for doctype_name in critical_doctypes:
            doctype_dir = doctype_path / doctype_name
            doctype_dir.mkdir()
            (doctype_dir / '__init__.py').touch()
            print(f"   üìÅ Created: Core/doctype/{doctype_name}")
        
        # Copy essential files from original Core if they exist
        original_core = Path('/home/frappe/frappe-bench/apps/frappe/frappe/core')
        if original_core.exists():
            for doctype_dir in original_core.glob('doctype/*'):
                if doctype_dir.is_dir():
                    target_dir = doctype_path / doctype_dir.name
                    if not target_dir.exists():
                        shutil.copytree(doctype_dir, target_dir)
                        print(f"   üìÑ Copied: {doctype_dir.name}")
        
        print("üéâ Emergency Core fix completed!")
        return True
        
    except Exception as e:
        print(f"‚ùå Emergency Core fix failed: {e}")
        return False

# ========== MAIN COMMAND HANDLER ==========
@click.command('migrate-app')
@click.argument('action')
@click.argument('source_app', required=False)
@click.argument('target_app', required=False)
@click.option('--modules', help='Specific modules to migrate')
@click.option('--doctypes', help='Specific doctypes to migrate')
@click.option('--site', help='Site name')
def migrate_app(action, source_app=None, target_app=None, modules=None, doctypes=None, site=None):
    """App Migrator - Frappe App Migration Toolkit with Enhanced Renaming"""
    
    print(f"üöÄ Migration command called: {action} for {source_app}")
    
    # ULTIMATE SYSTEM FIX ACTIONS
    if action == 'ultimate-system-fix':
        if not target_app:
            print("‚ùå Target app required for system fix")
            return
        run_complete_system_fix(target_app)
        
    elif action == 'fix-case-sensitivity':
        app_to_fix = target_app or source_app
        if not app_to_fix:
            print("‚ùå App name required")
            return
        fix_module_case_sensitivity(app_to_fix)
        
    elif action == 'ultimate-final-fix':
        app_to_fix = target_app or source_app
        if not app_to_fix:
            print("‚ùå App name required")
            return
        ultimate_final_fix(app_to_fix)
    elif action == 'fix-modules-final':
        app_to_fix = target_app or source_app
        if not app_to_fix:
            print("‚ùå App name required")
            return
        fix_modules_txt_final_format(app_to_fix)
     
    elif action == 'hero-rescue':
        app_to_fix = target_app or source_app
        if not app_to_fix:
            print("‚ùå App name required")
            return
        hero_rescue_protocol(app_to_fix)
        
    elif action == 'emergency-core-fix':
        emergency_core_fix()
    
   
    elif action == 'fix-module-apps':
        if not target_app:
            print("‚ùå Target app required")
            return
        fix_module_app_assignments(target_app)
        
    elif action == 'fix-doctype-apps':
        if not target_app:
            print("‚ùå Target app required")
            return
        fix_doctype_app_assignments(target_app)
        
    elif action == 'fix-naming-conventions':
        if not target_app:
            print("‚ùå Target app required")
            return
        fix_naming_conventions(target_app)
        
    elif action == 'fix-tree-structures':
        if not target_app:
            print("‚ùå Target app required")
            return
        fix_tree_structures(target_app)
        
    elif action == 'fix-custom-field-refs':
        if not target_app:
            print("‚ùå Target app required")
            return
        fix_custom_field_references(target_app)
        
    elif action == 'fix-property-setter-refs':
        if not target_app:
            print("‚ùå Target app required")
            return
        fix_property_setter_references(target_app)
    
    # NEW MODULE FIX COMMANDS - FIXED LOGIC
    elif action == 'fix-modules-txt':
        # Use target_app if provided, otherwise use source_app as target
        app_to_fix = target_app or source_app
        if not app_to_fix:
            print("‚ùå App name required")
            return
        fix_modules_txt_content(app_to_fix)
        
    elif action == 'fix-module-names':
        # Use target_app if provided, otherwise use source_app as target
        app_to_fix = target_app or source_app
        if not app_to_fix:
            print("‚ùå App name required")
            return
        fix_module_name_consistency(app_to_fix)
        
    elif action == 'analyze-module-names':
        # Use target_app if provided, otherwise use source_app as target
        app_to_analyze = target_app or source_app
        if not app_to_analyze:
            print("‚ùå App name required")
            return
        analyze_module_naming_issues(app_to_analyze)
        
    elif action == 'comprehensive-module-fix':
        # Use target_app if provided, otherwise use source_app as target
        app_to_fix = target_app or source_app
        if not app_to_fix:
            print("‚ùå App name required")
            return
        comprehensive_module_fix(app_to_fix)
    
    # ... rest of the command handler remains the same ...        
    
    # Migration Actions
    elif action == 'migrate-modules':
        if not source_app or not target_app:
            print("‚ùå Source and target app required")
            return
        migrate_app_modules(source_app, target_app, modules)
        
    elif action == 'migrate-doctypes':
        if not source_app or not target_app or not doctypes:
            print("‚ùå Source app, target app, and doctypes required")
            return
        migrate_specific_doctypes(source_app, target_app, doctypes)
        
    elif action == 'migrate-customizations':
        if not source_app or not target_app:
            print("‚ùå Source and target app required")
            return
        migrate_customizations(source_app, target_app)

    elif action == 'detect-pattern':
        if not source_app:
            print("‚ùå Source app required")
            return
        detect_customization_pattern(source_app)

    elif action == 'intelligent-migrate':
        if not source_app or not target_app:
            print("‚ùå Source and target app required")
            return
        intelligent_app_migration(source_app, target_app)
        
    elif action == 'analyze-dependencies':
        if not source_app:
            print("‚ùå Source app required")
            return
        analyze_app_dependencies(source_app)
        
    elif action == 'interactive-migrate':
        interactive_app_migration()
        
    # Analysis Actions
    elif action == 'analyze':
        if not source_app:
            print("‚ùå Source app required")
            return
        analyze_app(source_app)
        
    elif action == 'analyze-orphans':
        analyze_orphan_doctypes()
        
    elif action == 'validate-migration':
        if not source_app:
            print("‚ùå Source app required")
            return
        validate_migration_readiness(source_app)
        
    # Fix Actions
    elif action == 'fix-orphans':
        if not source_app:
            print("‚ùå Source app required")
            return
        fix_orphan_doctypes(source_app)
        
    elif action == 'restore-missing':
        if not source_app:
            print("‚ùå Source app required")
            return
        restore_missing_doctypes(source_app)
        
    elif action == 'fix-app-none':
        if not target_app:
            print("‚ùå Target app required")
            return
        fix_app_none_doctypes(target_app)
        
    elif action == 'fix-all-references':
        if not target_app:
            print("‚ùå Target app required")
            return
        fix_all_references(target_app)
        
    # Systematic Actions
    elif action == 'rename-systematic':
        systematic_renaming(source_app, target_app)
        
    # Legacy Actions
    elif action == 'interactive':
        interactive_migration()
        
    elif action == 'select-modules':
        selected_modules, selected_doctypes = select_modules_interactive(source_app, target_app)
        click.echo(f"üéØ Final selection: {len(selected_modules)} modules with doctype-level selection")
        
    else:
        print(f"‚ùå Unknown action: {action}")
        print("üìã Available actions:")
        print("   ü¶∏‚Äç‚ôÇÔ∏è ULTIMATE SYSTEM FIX: ultimate-system-fix, fix-module-apps, fix-doctype-apps, fix-naming-conventions, fix-tree-structures, fix-custom-field-refs, fix-property-setter-refs")
        print("   üìù MODULE FIXES: fix-modules-txt, fix-module-names, analyze-module-names, comprehensive-module-fix")
        print("   üöÄ MIGRATION: migrate-modules, migrate-doctypes, analyze-dependencies, interactive-migrate")
        print("   üß† INTELLIGENT: migrate-customizations, detect-pattern, intelligent-migrate")
        print("   üîß FIXES: fix-orphans, restore-missing, fix-app-none, fix-all-references")
        print("   üîç ANALYSIS: analyze, analyze-orphans, validate-migration")
        print("   üéÆ INTERACTIVE: interactive, select-modules")

# Export commands
commands = [migrate_app]
